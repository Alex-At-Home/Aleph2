/*******************************************************************************
 * Copyright 2015, The IKANOW Open Source Project.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package com.ikanow.aleph2.data_model.interfaces.shared_services;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.Future;

import org.checkerframework.checker.nullness.qual.NonNull;

import com.ikanow.aleph2.data_model.objects.shared.AuthorizationBean;
import com.ikanow.aleph2.data_model.objects.shared.ProjectBean;
import com.ikanow.aleph2.data_model.utils.CrudUtils;

/** A generic interface to an "object" datastore with a "MongoDB like" interface
 * @author acp
 *
 * @param <T> the bean type served by this repository
 */
public interface ICrudService<O> {

	//////////////////////////////////////////////////////

	// Authorization and project filtering:
	
	/** Returns a copy of the CRUD service that is filtered based on the client (user) and project rights
	 * @param authorization_fieldname the fieldname in the bean that determines where the per-bean authorization is held
	 * @param client_auth Optional specification of the user's access rights
	 * @param project_auth Optional specification of the projects's access rights
	 * @return The filtered CRUD repo
	 */
	ICrudService<O> getFilteredRepo(@NonNull String authorization_fieldname, Optional<AuthorizationBean> client_auth, Optional<ProjectBean> project_auth);
	
	//////////////////////////////////////////////////////
	
	// *C*REATE
	
	/** Stores the specified object in the database, optionally failing if it is already present
	 *  If the "_id" field of the object is not set then it is assigned
	 * @param new_object
	 * @param replace_if_present if true then any object with the specified _id is overwritten
	 * @return An optional containing the object, or Optional.empty() if not present 
	 */
	Future<Optional<O>> storeObject(@NonNull O new_object, boolean replace_if_present);

	/** Stores the specified object in the database, failing if it is already present
	 *  If the "_id" field of the object is not set then it is assigned
	 * @param new_object
	 * @return An optional containing the object, or Optional.empty() if not present 
	 */
	Future<Optional<O>> storeObject(@NonNull O new_object);
	
	//////////////////////////////////////////////////////
	
	// *R*ETRIEVE
	
	/** Registers that you wish to optimize sprecific queries
	 * @param ordered_field_list a list of the fields in the query
	 * @return a future describing if the optimization was successfully completed
	 */
	Future<Boolean> optimizeQuery(@NonNull List<String> ordered_field_list);	

	/** Registers that you wish to optimize sprecific queries
	 * @param A specification that must be initialized via CrudUtils.anyOf(...) and then the desired fields added via .exists(<field or getter>)
	 * @return a future describing if the optimization was successfully completed
	 */
	Future<Boolean> optimizeQuery(CrudUtils.@NonNull QueryComponent<O> spec);		
	
	/** Inform the system that a specific query optimization is no longer required
	 * @param ordered_field_list a list of the fields in the query
	 * @return whether this optimization was registered in the first place
	 */
	boolean deregisterOptimizedQuery(@NonNull List<String> ordered_field_list);	

	/** Inform the system that a specific query optimization is no longer required
	 * @param A specification that must be initialized via CrudUtils.anyOf(...) and then the desired fields added via .exists(<field or getter>)
	 * @return whether this optimization was registered in the first place
	 */
	boolean deregisterOptimizedQuery(CrudUtils.@NonNull QueryComponent<O> spec);		
	
	/** Returns the object (in optional form to handle its not existing) given a simple object template that contains a unique search field (but other params are allowed)
	 * @param unique_spec A specification (must describe at most one object) generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @return A future containing an optional containing the object, or Optionl.empty() 
	 */
	Future<Optional<O>> getObjectBySpec(CrudUtils.@NonNull QueryComponent<O> unique_spec);

	/** Returns the object (in optional form to handle its not existing) given a simple object template that contains a unique search field (but other params are allowed)
	 * @param unique_spec A specification (must describe at most one object) generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @param field_list List of fields to return, supports "." nesting
	 * @return A future containing an optional containing the object, or Optionl.empty() 
	 */
	Future<Optional<O>> getObjectBySpec(CrudUtils.@NonNull QueryComponent<O> unique_spec, @NonNull List<String> field_list);

	/** Returns the object (in optional form to handle its not existing) given a simple object template that contains a unique search field (but other params are allowed)
	 * @param unique_multi_spec A specification (must describe at most one object) generated by CrudUtils.allOf(..) or CrudUtils.anyOf(..) where the args is a list of QueryComponent (ie generated from the single object anyOf/allOf) 
	 * @return A future containing an optional containing the object, or Optionl.empty() 
	 */
	Future<Optional<O>> getObjectBySpec(CrudUtils.@NonNull MultiQueryComponent<O> unique_multi_spec);

	/** Returns the object (in optional form to handle its not existing) given a simple object template that contains a unique search field (but other params are allowed)
	 * @param unique_multi_spec A specification (must describe at most one object) generated by CrudUtils.allOf(..) or CrudUtils.anyOf(..) where the args is a list of QueryComponent (ie generated from the single object anyOf/allOf) 
	 * @param field_list List of fields to return, supports "." nesting
	 * @return A future containing an optional containing the object, or Optionl.empty() 
	 */
	Future<Optional<O>> getObjectBySpec(CrudUtils.@NonNull MultiQueryComponent<O> unique_multi_spec, @NonNull List<String> field_list);
	/** Returns the object given the id
	 * @param id the id of the object
	 * @return A future containing an optional containing the object, or Optionl.empty() 
	 */
	Future<Optional<O>> getObjectById(@NonNull String id);	

	/** Returns the object given the id
	 * @param id the id of the object
	 * @param field_list List of fields to return, supports "." nesting
	 * @return A future containing an optional containing the object, or Optionl.empty() 
	 */
	Future<Optional<O>> getObjectById(@NonNull String id, @NonNull List<String> field_list);	
	
	/** Returns the list of objects specified by the spec
	 * @param spec A specification generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @param field_list List of fields to return, supports "." nesting
	 * @return A future containing a (possibly empty) list of Os 
	 */
	Future<Iterable<O>> getObjectsBySpec(CrudUtils.@NonNull QueryComponent<O> spec, @NonNull List<String> field_list);

	/** Returns the list of objects specified by the spec (all fields returned)
	 * @param spec A specification generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @return A future containing a (possibly empty) list of Os 
	 */
	Future<Iterable<O>> getObjectsBySpec(CrudUtils.@NonNull QueryComponent<O> spec);
	
	/** Returns the list of objects specified by the spec
	 * @param unique_multi_spec A specification (must describe at most one object) generated by CrudUtils.allOf(..) or CrudUtils.anyOf(..) where the args is a list of QueryComponent (ie generated from the single object anyOf/allOf) 
	 * @param field_list List of fields to return, supports "." nesting
	 * @return A future containing a (possibly empty) list of Os 
	 */
	Future<Iterable<O>> getObjectsBySpec(CrudUtils.@NonNull MultiQueryComponent<O> multi_spec, @NonNull List<String> field_list);

	/** Returns the list of objects specified by the spec (all fields returned)
	 * @param A specification that must be initialized via CrudUtils.anyOf(...) and then the desired fields added via .exists(<field or getter>)
	 * @return A future containing a (possibly empty) list of Os 
	 */
	Future<Iterable<O>> getObjectsBySpec(CrudUtils.@NonNull MultiQueryComponent<O> multi_spec);
	
	/** Counts the number of objects specified by the spec
	 * @param spec A specification generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @param field_list List of fields to return, supports "." nesting
	 * @return A future containing the number of matching objects 
	 */
	Future<Long> countObjectsBySpec(CrudUtils.@NonNull QueryComponent<O> spec, @NonNull List<String> field_list);

	/** Counts the number of objects specified by the spec (all fields returned)
	 * @param spec A specification generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @return A future containing the number of matching objects 
	 */
	Future<Long> countObjectsBySpec(CrudUtils.@NonNull QueryComponent<O> spec);
	
	//////////////////////////////////////////////////////
	
	// *U*PDATE
	
	/** Updates the specified object
	 * @param id the id of the object to update
	 * @param set overwrites any fields
	 * @param add increments numbers or adds to sets/lists
	 * @param remove decrements numbers of removes from sets/lists
	 * @return a future describing if the update was successful
	 */
	Future<Boolean> updateObjectById(String id, Optional<O> set, Optional<O> add, Optional<O> remove);

	/** Updates the specified object
	 * @param unique_spec A specification (must describe at most one object) generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @param set overwrites any fields
	 * @param add increments numbers or adds to sets/lists
	 * @param remove decrements numbers of removes from sets/lists
	 * @return a future describing if the update was successful
	 */
	Future<Boolean> updateObjectBySpec(CrudUtils.@NonNull QueryComponent<O> unique_spec, Optional<O> set, Optional<O> add, Optional<O> remove);

	/** Updates the specified object
	 * @param spec A specification generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @param set overwrites any fields
	 * @param add increments numbers or adds to sets/lists
	 * @param remove decrements numbers of removes from sets/lists
	 * @return a future describing the number of objects updated
	 */
	Future<Long> updateObjectsBySpec(CrudUtils.@NonNull QueryComponent<O> spec, Optional<O> set, Optional<O> add, Optional<O> remove);

	/** Updates the specified object, returning the updated version
	 * @param id the id of the object to update
	 * @param set overwrites any fields
	 * @param add increments numbers or adds to sets/lists
	 * @param remove decrements numbers of removes from sets/lists
	 * @param before_updated if specified and "true" then returns the object _before_ it is modified
	 * @return a future describing if the update was successful
	 */
	Future<Boolean> updateAndReturnObjectById(String id, Optional<O> set, Optional<O> add, Optional<O> remove, Optional<Boolean> before_updated);

	/** Updates the specified object, returning the updated version
	 * @param unique_spec A specification (must describe at most one object) generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @param set overwrites any fields
	 * @param add increments numbers or adds to sets/lists
	 * @param remove decrements numbers of removes from sets/lists
	 * @param before_updated if specified and "true" then returns the object _before_ it is modified
	 * @return a future describing if the update was successful
	 */
	Future<Boolean> updateAndReturnObjectBySpec(CrudUtils.@NonNull QueryComponent<O> unique_spec, Optional<O> set, Optional<O> add, Optional<O> remove, Optional<Boolean> before_updated);

	//////////////////////////////////////////////////////
	
	// *D*ELETE
	
	/** Deletes the specific object
	 * @param id the id of the object to update
	 * @return a future describing if the delete was successful
	 */
	Future<Boolean> deleteObjectById(@NonNull String id);

	/** Deletes the specific object
	 * @param unique_spec A specification (must describe at most one object) generated by CrudUtils.allOf(...) (all fields must be match) or CrudUtils.anyOf(...) (any fields must match) together with extra fields generated by .withAny(..), .withAll(..), present(...) or notPresent(...)   
	 * @return a future describing if the delete was successful
	 */
	Future<Boolean> deleteObjectBySpec(CrudUtils.@NonNull QueryComponent<O> unique_spec);

	/** Deletes the specific object
	 * @param A specification that must be initialized via CrudUtils.anyOf(...) and then the desired fields added via .exists(<field or getter>)
	 * @return a future describing the number of objects updated
	 */
	Future<Long> deleteObjectsBySpec(CrudUtils.@NonNull QueryComponent<O> spec);

	//////////////////////////////////////////////////////
	
	// OTHER:
	
	/** Returns a simple searchable ("Lucene-like") view of the data
	 * @return
	 */
	IBasicSearchService<O> getSearchService();
	
	/** USE WITH CARE: this returns the driver to the underlying technology
	 *  shouldn't be used unless absolutely necessary!
	 * @param driver_class the class of the driver
	 * @param a string containing options in some technology-specific format
	 * @return a driver to the underlying technology. Will exception if you pick the wrong one!
	 */
	<T> T getUnderlyingPlatformDriver(Class<T> driver_class, Optional<String> driver_options);
}
